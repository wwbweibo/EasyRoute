package main

import (
	"flag"
	"fmt"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/pluginpb"
)

var enableRpc *bool

// main is the entry point for the application.
func main() {
	var flags flag.FlagSet

	enableRpc = flags.Bool("rpc", false, "enable RPC generation")

	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		gen.SupportedFeatures = uint64(pluginpb.CodeGeneratorResponse_FEATURE_PROTO3_OPTIONAL)
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generate(gen, f)
		}
		return nil
	})
}

// generate takes plugin and file as input, then output the generated file
func generate(plugin *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	filename := file.GeneratedFilenamePrefix + "_easyroute.pb.go"
	g := plugin.NewGeneratedFile(filename, file.GoImportPath)
	// 写入一些警告之类的 告诉用户不要修改
	g.P("// Code generated by protoc-gen-easyroute. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// protoc-gen-easyroute %s", version))
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	for _, service := range file.Services {
		generateController(g, service)
	}

	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "github.com/wwbweibo/EasyRoute/http"})
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "context"})
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "reflect"})
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "google.golang.org/grpc"})
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "github.com/lazada/protoc-gen-go-http/codec"})
	return g
}
